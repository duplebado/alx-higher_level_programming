The ``0-add_integer`` module
============================

Using ``add_integer`` function
------------------------------

``add_integer`` returns the addition of two ints or floats, or an int and a float
Note: the second argument is optional, by default, it is 98
Note: floats are typecasted to ints
---------------------------------------------------------------------------------

First, import ``add_integer`` from the ``0-add_integer`` module:

	>>> add_integer = __import__("0-add_integer").add_integer

Test Case 1, two ints:

	>>> add_integer(2, 5)
	7
	>>> add_integer(200, 567)
	767
	>>> add_integer(180, -40)
	140
	>>> add_integer(-25, -25)
	-50
	>>> add_integer(2)
	100

Test Case 2, two floats:

	>>> add_integer(5.8, 9.99)
	14
	>>> add_integer(123.856, 12.45)
	135
	>>> add_integer(-0.3, -74.89567)
	-74
	>>> add_integer(8.94, -9.878484)
	-1
	>>> add_integer(4.9585)
	102

Test Case 3, an int and a float:

	>>> add_integer(8, 8.94848)
	16
	>>> add_integer(-4.9595002, -6)
	-10
	>>> add_integer(90, -990.847875)
	-900
	>>> add_integer(444.945852, -20)
	424

Test Case 4, values that are neither ints or floats
Note: if both arguments are neither ints or floats, a TypeError
message is only printed for the first argument:

	>>> add_integer("number", 8)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(6.79, "number")
        Traceback (most recent call last):
        TypeError: b must be an integer

	>>> add_integer("number", "int")
        Traceback (most recent call last):
        TypeError: a must be an integer

	>>> add_integer(None, 892.456)
        Traceback (most recent call last):
        TypeError: a must be an integer

	>>> add_integer(None)
        Traceback (most recent call last):
        TypeError: a must be an integer

Test Case 5, ``add_integer`` will fail if infinity is provided:

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

	>>> add_integer(56, float('inf'))
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer

Test Case 6, ``add_integer`` will fail if NaN is provided:

	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

	>>> add_integer(96, float('nan'))
        Traceback (most recent call last):
        ValueError: cannot convert float NaN to integer
